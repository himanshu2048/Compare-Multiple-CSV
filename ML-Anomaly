import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import IsolationForest
import matplotlib.pyplot as plt

# Load your data
df = pd.read_csv('your_file.csv')

# Convert the timestamp column to datetime format
df['timestamp'] = pd.to_datetime(df['timestamp'])

# Select the feature for anomaly detection
X = df[['count']]

# Initialize and fit StandardScaler
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Initialize and fit Isolation Forest
model = IsolationForest(contamination=0.05)
model.fit(X_scaled)

# Predict outliers (anomalies)
df['anomaly'] = model.predict(X_scaled)

# Visualize the anomalies with a line plot
plt.figure(figsize=(12, 6))
plt.plot(df['timestamp'], df['count'], color='blue', label='Count')
plt.plot(df['timestamp'][df['anomaly'] == -1], df['count'][df['anomaly'] == -1], 'ro', markersize=8, label='Anomaly')
plt.title('Anomaly Detection with Isolation Forest')
plt.xlabel('Timestamp')
plt.ylabel('Count')
plt.legend()
plt.xticks(rotation=45)
plt.show()


# Visualization
plt.figure(figsize=(12, 6))
sns.scatterplot(x='timestamp', y='response_time', hue='anomaly', data=df, palette={1: 'blue', -1: 'red'})
plt.title('Anomaly Detection Based on Response Time')
plt.xlabel('Timestamp')
plt.ylabel('Response Time')
plt.legend(['Normal', 'Anomaly'])
plt.show()
